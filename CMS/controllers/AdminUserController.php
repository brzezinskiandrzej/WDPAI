<?php
namespace App\Controllers;


use App\Repositories\UserRepository;
use App\Services\UserService;

session_start();

/**
 * Kontroler sekcji "UÅ¼ytkownicy" w panelu admina.
 * ZastÄ™puje starÄ… czÄ™Å›Ä‡ adminscript.php => if(type=='users') ...
 */
class AdminUserController
{
    private UserService $userService;
    

    public function __construct()
    {
       

        $userRepo = new UserRepository($this->conn);
        $this->userService = new UserService($userRepo);
    }

    /**
     * GÅ‚Ã³wna metoda do wyÅ›wietlania uÅ¼ytkownikÃ³w
     * bazuje na ?type=users&co=... (zwykly/mod/admin/wszystko)
     */
    public function showUsers()
    {
        $co = $_GET['co'] ?? null;

        // JeÅ›li brak 'co', w starym kodzie wyÅ›wietlaliÅ›my guziki do wyboru grup:
        if (!$co) {
            // Tylko wyÅ›wietlamy widok z guzikami (bez listy)
            $users = []; // brak listy
            require __DIR__ . '/../views/adminUsersView.php';
            return;
        }

        // Gdy jest 'co', pobieramy dane z serwisu:
        $myId = $_SESSION['tablica'][7] ?? null; // id aktualnie zalogowanego
        $users = $this->userService->getUsersByCo($co, $myId);

        // Teraz wyÅ›wietlamy widok z listÄ… $users
        require __DIR__ . '/../views/adminUsersView.php';
    }

    /**
     * Blokowanie uÅ¼ytkownika (action=block)
     */
    public function blockUser()
    {
        if (!isset($_POST['id'])) {
            header('Location: index.php?type=users');
            exit;
        }
        $userId = (int)$_POST['id'];

        $this->userService->blockUser($userId);

        $_SESSION['warning3'] = 'Konto uÅ¼ytkownika zostaÅ‚o zablokowane ğŸ™‚';
        header('Location: index.php?type=users');
        exit;
    }

    /**
     * Odblokowanie uÅ¼ytkownika (action=unblock)
     */
    public function unblockUser()
    {
        if (!isset($_POST['id'])) {
            header('Location: index.php?type=users');
            exit;
        }
        $userId = (int)$_POST['id'];
        
        $this->userService->unblockUser($userId);

        $_SESSION['warning3'] = 'Konto uÅ¼ytkownika zostaÅ‚o odblokowane ğŸ™‚';
        header('Location: index.php?type=users');
        exit;
    }

    /**
     * Usuwanie uÅ¼ytkownika (action=delete)
     */
    public function deleteUser()
    {
        if (!isset($_POST['id'])) {
            header('Location: index.php?type=users');
            exit;
        }
        $userId = (int)$_POST['id'];

        $this->userService->deleteUserCompletely($userId);

        $_SESSION['warning3'] = 'Konto uÅ¼ytkownika zostaÅ‚o usuniÄ™te ğŸ™‚';
        header('Location: index.php?type=users');
        exit;
    }

    /**
     * Zmiana uprawnieÅ„ uÅ¼ytkownika (action=change)
     */
    public function changeUserPermission()
    {
        if (!isset($_POST['id']) || !isset($_POST['wybor'])) {
            header('Location: index.php?type=users');
            exit;
        }
        $userId = (int)$_POST['id'];
        $role   = $_POST['wybor'];

        $this->userService->changeUserPermission($userId, $role);

        $_SESSION['warning3'] = 'Uprawnienia uÅ¼ytkownika zostaÅ‚y pomyÅ›lnie zmienione ğŸ™‚';
        header('Location: index.php?type=users');
        exit;
    }
}
